using System.Text;
using Hoho.Core;

namespace Hoho.Decomp;

/// <summary>
/// Generates concatenation scripts for one-shot codebase injection.
/// HIGH-PERFORMANCE script generation with minification support.
/// </summary>
public static class ConcatScriptGenerator
{
    private const string ScriptTemplate = @"#!/bin/bash

# {AGENT_NAME} Codebase Concatenation Script
# Outputs all decompiled code as a single stream for one-shot injection
# Generated by HOHO DecompilerService

set -e

SCRIPT_DIR=""$(cd ""$(dirname ""${BASH_SOURCE[0]}"")""  && pwd)""
PACKAGE_DIR=""$SCRIPT_DIR/{PACKAGE_PATH}""

# Header function
print_header() {
    local filename=""$1""
    local filesize=""$2""
    echo """"
    echo ""═══════════════════════════════════════════════════════════════════════════════""
    echo ""FILE: $filename""
    echo ""SIZE: $filesize bytes""
    echo ""═══════════════════════════════════════════════════════════════════════════════""
    echo """"
}

# Minify JavaScript
minify_js() {
    # Basic minification: remove comments and extra whitespace
    sed -e 's|//.*$||g' \
        -e 's|/\*[^*]*\*\+\([^/*][^*]*\*\+\)*\/||g' \
        -e 's/^[[:space:]]*//g' \
        -e 's/[[:space:]]*$//g' \
        -e '/^$/d' \
        -e 's/[[:space:]]\+/ /g'
}

echo ""╔══════════════════════════════════════════════════════════════════════════════╗""
echo ""║                         {AGENT_NAME} - COMPLETE CODEBASE                      ║""
echo ""║                         One-Shot Reference Injection                          ║""
echo ""╚══════════════════════════════════════════════════════════════════════════════╝""

{FILE_PROCESSING_COMMANDS}

echo """"
echo ""═══════════════════════════════════════════════════════════════════════════════""
echo ""END OF CODEBASE""
echo ""═══════════════════════════════════════════════════════════════════════════════""
";

    /// <summary>
    /// Generate concatenation script for a decompiled agent.
    /// </summary>
    public static async Task GenerateScriptAsync(string agentName, string agentDir)
    {
        using var timer = Logger.TimeOperation($"Generate concat script for {agentName}");
        
        var scriptPath = Path.Combine(agentDir, "concat-codebase.sh");
        var packageDir = Path.Combine(agentDir, "package");
        
        // Build file processing commands based on what exists
        var commands = new StringBuilder();
        
        if (Directory.Exists(packageDir))
        {
            await AddPackageFilesAsync(commands, packageDir);
        }
        
        // Generate the script
        var script = ScriptTemplate
            .Replace("{AGENT_NAME}", agentName.ToUpper())
            .Replace("{PACKAGE_PATH}", "package")
            .Replace("{FILE_PROCESSING_COMMANDS}", commands.ToString());
        
        await File.WriteAllTextAsync(scriptPath, script);
        
        // Make executable on Unix
        if (!OperatingSystem.IsWindows())
        {
            await MakeExecutableAsync(scriptPath);
        }
        
        Logger.Info($"Generated concatenation script: {scriptPath}");
    }
    
    /// <summary>
    /// Add package file processing commands to the script.
    /// </summary>
    private static async Task AddPackageFilesAsync(StringBuilder commands, string packageDir)
    {
        // Process package.json
        commands.AppendLine(@"
# Process package.json
if [ -f ""$PACKAGE_DIR/package.json"" ]; then
    print_header ""package.json"" ""$(stat -c%s ""$PACKAGE_DIR/package.json"" 2>/dev/null || stat -f%z ""$PACKAGE_DIR/package.json"" 2>/dev/null || echo 'unknown')""
    cat ""$PACKAGE_DIR/package.json""
fi");

        // Process TypeScript definitions
        commands.AppendLine(@"
# Process TypeScript definitions (keep readable)
for dts_file in ""$PACKAGE_DIR""/*.d.ts; do
    if [ -f ""$dts_file"" ]; then
        filename=$(basename ""$dts_file"")
        filesize=$(stat -c%s ""$dts_file"" 2>/dev/null || stat -f%z ""$dts_file"" 2>/dev/null || echo 'unknown')
        print_header ""$filename"" ""$filesize""
        cat ""$dts_file""
    fi
done");

        // Process JavaScript modules
        commands.AppendLine(@"
# Process JavaScript modules
for js_file in ""$PACKAGE_DIR""/*.mjs ""$PACKAGE_DIR""/*.js; do
    if [ -f ""$js_file"" ]; then
        filename=$(basename ""$js_file"")
        filesize=$(stat -c%s ""$js_file"" 2>/dev/null || stat -f%z ""$js_file"" 2>/dev/null || echo 'unknown')
        
        # Check if it's already minified (large single-line files)
        line_count=$(wc -l < ""$js_file"")
        if [ ""$line_count"" -lt 10 ] && [ ""$filesize"" -gt 100000 ]; then
            print_header ""$filename (already minified)"" ""$filesize""
            echo ""// File is already minified. Showing first 2000 characters as sample:""
            head -c 2000 ""$js_file""
            echo """"
            echo ""... [truncated - full size: $filesize bytes]""
        else
            print_header ""$filename (minified)"" ""$filesize""
            minify_js < ""$js_file""
        fi
    fi
done");

        // Process other files
        commands.AppendLine(@"
# Process documentation
for doc_file in ""$PACKAGE_DIR""/README.md ""$PACKAGE_DIR""/LICENSE.md; do
    if [ -f ""$doc_file"" ]; then
        filename=$(basename ""$doc_file"")
        filesize=$(stat -c%s ""$doc_file"" 2>/dev/null || stat -f%z ""$doc_file"" 2>/dev/null || echo 'unknown')
        print_header ""$filename"" ""$filesize""
        cat ""$doc_file""
    fi
done");

        // Add binary asset summary
        commands.AppendLine(@"
# Binary assets summary
echo """"
echo ""═══════════════════════════════════════════════════════════════════════════════""
echo ""BINARY ASSETS SUMMARY""
echo ""═══════════════════════════════════════════════════════════════════════════════""
echo """"

# WASM files
for wasm_file in ""$PACKAGE_DIR""/*.wasm; do
    if [ -f ""$wasm_file"" ]; then
        filename=$(basename ""$wasm_file"")
        filesize=$(stat -c%s ""$wasm_file"" 2>/dev/null || stat -f%z ""$wasm_file"" 2>/dev/null || echo 'unknown')
        echo ""• $filename: $filesize bytes""
    fi
done

# Vendor binaries
if [ -d ""$PACKAGE_DIR/vendor"" ]; then
    echo ""• Vendor binaries:""
    find ""$PACKAGE_DIR/vendor"" -type f \( -name ""*.exe"" -o -perm -111 \) | while read -r binary; do
        relpath=${binary#$PACKAGE_DIR/vendor/}
        size=$(stat -c%s ""$binary"" 2>/dev/null || stat -f%z ""$binary"" 2>/dev/null || echo 'unknown')
        echo ""  - $relpath: $size bytes""
    done
fi");
    }
    
    /// <summary>
    /// Make a script executable on Unix systems.
    /// </summary>
    private static async Task MakeExecutableAsync(string scriptPath)
    {
        try
        {
            var process = new System.Diagnostics.Process
            {
                StartInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "chmod",
                    Arguments = $"+x \"{scriptPath}\"",
                    UseShellExecute = false,
                    CreateNoWindow = true
                }
            };
            
            process.Start();
            await process.WaitForExitAsync();
        }
        catch (Exception ex)
        {
            Logger.Warn($"Could not make script executable: {ex.Message}");
        }
    }
    
    /// <summary>
    /// Generate a master concatenation script in the root decomp directory.
    /// </summary>
    public static async Task GenerateMasterScriptAsync(string decompDir)
    {
        using var timer = Logger.TimeOperation("Generate master concat script");
        
        var scriptPath = Path.Combine(decompDir, "concat-all.sh");
        
        var script = @"#!/bin/bash

# HOHO Master Concatenation Script
# Runs all agent concatenation scripts

set -e

SCRIPT_DIR=""$(cd ""$(dirname ""${BASH_SOURCE[0]}"")""  && pwd)""

echo ""╔══════════════════════════════════════════════════════════════════════════════╗""
echo ""║                    HOHO DECOMP - ALL AGENTS CONCATENATION                     ║""
echo ""╚══════════════════════════════════════════════════════════════════════════════╝""
echo """"

# Find and run all concat-codebase.sh scripts
for agent_dir in ""$SCRIPT_DIR""/*; do
    if [ -d ""$agent_dir"" ] && [ -f ""$agent_dir/concat-codebase.sh"" ]; then
        agent_name=$(basename ""$agent_dir"")
        echo ""Processing $agent_name...""
        echo ""--------------------------------------------------------------------------------""
        bash ""$agent_dir/concat-codebase.sh""
        echo """"
    fi
done

echo ""╔══════════════════════════════════════════════════════════════════════════════╗""
echo ""║                           ALL AGENTS PROCESSED                                ║""
echo ""╚══════════════════════════════════════════════════════════════════════════════╝""
";

        await File.WriteAllTextAsync(scriptPath, script);
        
        if (!OperatingSystem.IsWindows())
        {
            await MakeExecutableAsync(scriptPath);
        }
        
        Logger.Info($"Generated master concatenation script: {scriptPath}");
    }
}